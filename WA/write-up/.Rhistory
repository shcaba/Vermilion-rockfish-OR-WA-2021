values = four.colors[4:5],
name = "",
labels = c(yield.lab, F.lab)
) +
labs(x = sensi_xlab, y = "") +
guides(fill = FALSE) +
# annotate("text",x=anno.x,y=anno.y,label=anno.lab)+
geom_hline(yintercept = 0, lwd = 0.5, color = "gray") +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
# p4<-grid.arrange(p1,p2,p3,heights=c(5,5,8))
p4 <- ggpubr::ggarrange(p1, p2, p3, nrow = 3, ncol = 1, align = "v", heights = c(5, 5, 8))
ggsave(file.path(dir, "Sensi_REplot_SB_Dep_F_MSY.png"), p4)
# Log plots
Dev.quants.ggplot.SBs <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[1] | Metric == unique(Dev.quants.ggplot$Metric)[2])
p1 <- ggplot(Dev.quants.ggplot.SBs, aes(.data$Model_num_plot, logRE)) +
geom_point(aes(shape = .data$Metric, color = .data$Metric), position = position_dodge(pt.dodge)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[1], ymax = logCI_DQs_RE[1]), fill = NA, color = four.colors[1]) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[2], ymax = logCI_DQs_RE[2]), fill = NA, color = four.colors[2]) +
scale_x_continuous(breaks = 2:(model.summaries$n)) +
# scale_y_continuous(limits=ylims.in[1:2])+
coord_cartesian(ylim = ylims.in[1:2]) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
panel.grid.minor = element_blank()
) +
scale_shape_manual(
values = c(16, 17),
name = "",
labels = c(
spawn.lab.0,
spawn.lab.curr
)
) +
scale_color_manual(
values = four.colors[1:2],
name = "",
labels = c(
spawn.lab.0,
spawn.lab.curr
)
) +
theme(legend.text.align = 0) +
labs(x = " ", y = " ") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_hline(yintercept = 0, lwd = 0.5, color = "gray") +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
Dev.quants.ggplot.Dep <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[3])
p2 <- ggplot(Dev.quants.ggplot.Dep, aes(.data$Model_num_plot, logRE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[3], ymax = logCI_DQs_RE[3]), fill = NA, color = four.colors[3]) +
scale_x_continuous(breaks = 2:(model.summaries$n)) +
# scale_y_continuous(limits=ylims.in[7:8])+
coord_cartesian(ylim = ylims.in[7:8]) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
panel.grid.minor = element_blank()
) +
theme(legend.text.align = 0) +
labs(x = " ", y = "Log relative change") +
scale_colour_manual(
values = four.colors[3],
name = "",
labels = spawn.lab.ratio
) +
annotate("text", x = c((model.summaries$n + 1), (model.summaries$n + 1)), y = c(logTRP + 0.08, logLRP - 0.08), label = c("TRP", "LRP"), size = c(3, 3), color = c("darkgreen", "darkred")) +
geom_hline(yintercept = c(logTRP, logLRP, 0), lty = c(3, 3, 1), lwd = c(0.5, 0.5, 0.5), color = c("darkgreen", "darkred", "gray")) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
Dev.quants.ggplot.MSY_FMSY <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[4] | Metric == unique(Dev.quants.ggplot$Metric)[5])
p3 <- ggplot(Dev.quants.ggplot.MSY_FMSY, aes(.data$Model_num_plot, logRE, group = .data$Metric)) +
geom_point(aes(shape = .data$Metric, color = .data$Metric), position = position_dodge(pt.dodge)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[4], ymax = logCI_DQs_RE[4]), fill = NA, color = four.colors[4]) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[5], ymax = logCI_DQs_RE[5]), fill = NA, color = four.colors[5]) +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot$Model_name)) +
# scale_y_continuous(limits=ylims.in[9:10])+
coord_cartesian(ylim = ylims.in[9:10]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.text.align = 0,
panel.grid.minor = element_blank()
) +
#          legend.text=element_text(size=7.5))+
scale_shape_manual(
values = c(16, 17),
name = "",
labels = c(yield.lab, F.lab)
) +
scale_color_manual(
values = four.colors[4:5],
name = "",
labels = c(yield.lab, F.lab)
) +
labs(x = sensi_xlab, y = "") +
guides(fill = FALSE) +
# annotate("text",x=anno.x,y=anno.y,label=anno.lab)+
geom_hline(yintercept = 0, lwd = 0.5, color = "gray") +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
p4 <- ggpubr::ggarrange(p1, p2, p3, nrow = 3, ncol = 1, align = "v", heights = c(5, 5, 8))
# p4<-grid.arrange(p1,p2,p3,heights=c(5,5,8))
ggsave(file.path(dir, "Sensi_logREplot_SB_Dep_F_MSY.png"), p4)
}
if (plot.figs[2] == 1) {
# RE plot
Dev.quants.ggplot.SB0 <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[1])
ggplot(Dev.quants.ggplot.SB0, aes(.data$Model_num_plot, RE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -CI_DQs_RE[1], ymax = CI_DQs_RE[1]), fill = NA, color = four.colors[1]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.SB0$Model_name)) +
# scale_y_continuous(limits=ylims.in[3:4])+
coord_cartesian(ylim = ylims.in[3:4]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.text.align = 0,
panel.grid.minor = element_blank()
) +
scale_colour_manual(
values = four.colors[1],
name = "",
labels = spawn.lab.0
) +
labs(x = sensi_xlab, y = "Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_REplot_SO_0.png"))
# Log plot
Dev.quants.ggplot.SB0 <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[1])
ggplot(Dev.quants.ggplot.SB0, aes(.data$Model_num_plot, logRE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[1], ymax = logCI_DQs_RE[1]), fill = NA, color = four.colors[1]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.SB0$Model_name)) +
# scale_y_continuous(limits=ylims.in[3:4])+
coord_cartesian(ylim = ylims.in[3:4]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.text.align = 0,
panel.grid.minor = element_blank()
) +
scale_colour_manual(
values = four.colors[1],
name = "",
labels = spawn.lab.0
) +
labs(x = sensi_xlab, y = "Log Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_logREplot_SO_0.png"))
}
if (plot.figs[3] == 1) {
# RE plots
Dev.quants.ggplot.SBt <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[2])
ggplot(Dev.quants.ggplot.SBt, aes(.data$Model_num_plot, RE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -CI_DQs_RE[2], ymax = CI_DQs_RE[2]), fill = NA, color = four.colors[2]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), minor_breaks = NULL, labels = unique(Dev.quants.ggplot.SBt$Model_name)) +
# scale_y_continuous(limits=ylims.in[5:6])+
coord_cartesian(ylim = ylims.in[5:6]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
# panel.grid.minor = element_blank(),
legend.text.align = 0
) +
scale_colour_manual(
values = four.colors[2],
name = "",
labels = spawn.lab.curr
) +
labs(x = sensi_xlab, y = "Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_REplot_SOcurrent.png"))
# Log plots
Dev.quants.ggplot.SBt <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[2])
ggplot(Dev.quants.ggplot.SBt, aes(.data$Model_num_plot, logRE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[2], ymax = logCI_DQs_RE[2]), fill = NA, color = four.colors[2]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), minor_breaks = NULL, labels = unique(Dev.quants.ggplot.SBt$Model_name)) +
# scale_y_continuous(limits=ylims.in[5:6])+
coord_cartesian(ylim = ylims.in[5:6]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
# panel.grid.minor = element_blank(),
legend.text.align = 0
) +
scale_colour_manual(
values = four.colors[2],
name = "",
labels = spawn.lab.curr
) +
labs(x = sensi_xlab, y = "Log Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_logREplot_SOcurrent.png"))
}
if (plot.figs[4] == 1) {
# RE plots
Dev.quants.ggplot.Dep <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[3])
ggplot(Dev.quants.ggplot.Dep, aes(.data$Model_num_plot, RE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -CI_DQs_RE[3], ymax = CI_DQs_RE[3]), fill = NA, color = four.colors[3]) +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.Dep$Model_name)) +
# scale_y_continuous(limits=ylims.in[7:8])+
coord_cartesian(ylim = ylims.in[7:8]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.text.align = 0,
panel.grid.minor = element_blank()
) +
labs(x = " ", y = "Relative change") +
scale_colour_manual(
values = four.colors[3],
name = "",
labels = spawn.lab.ratio
) +
annotate("text", x = c((model.summaries$n + 2), (model.summaries$n + 2)), y = c(TRP + 0.03, LRP - 0.03), label = c("TRP", "LRP"), size = c(3, 3), color = c("darkgreen", "darkred")) +
labs(x = sensi_xlab, y = "Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_hline(yintercept = c(TRP, LRP, 0), lty = c(3, 3, 1), lwd = c(0.5, 0.5, 0.5), color = c("darkgreen", "darkred", "gray")) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_REplot_status.png"))
# Log plots
Dev.quants.ggplot.Dep <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[3])
ggplot(Dev.quants.ggplot.Dep, aes(.data$Model_num_plot, logRE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[3], ymax = logCI_DQs_RE[3]), fill = NA, color = four.colors[3]) +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.Dep$Model_name)) +
# scale_y_continuous(limits=ylims.in[7:8])+
coord_cartesian(ylim = ylims.in[7:8]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
legend.text.align = 0,
panel.grid.minor = element_blank()
) +
labs(x = " ", y = "Relative change") +
scale_colour_manual(
values = four.colors[3],
name = "",
labels = spawn.lab.ratio
) +
annotate("text", x = c((model.summaries$n + 2), (model.summaries$n + 2)), y = c(logTRP + 0.03, logLRP - 0.03), label = c("TRP", "LRP"), size = c(3, 3), color = c("darkgreen", "darkred")) +
labs(x = sensi_xlab, y = "Log Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_hline(yintercept = c(logTRP, logLRP, 0), lty = c(3, 3, 1), lwd = c(0.5, 0.5, 0.5), color = c("darkgreen", "darkred", "gray")) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_logREplot_status.png"))
}
if (plot.figs[5] == 1) {
# RE plots
Dev.quants.ggplot.MSY <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[4])
ggplot(Dev.quants.ggplot.MSY, aes(.data$Model_num_plot, RE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -CI_DQs_RE[4], ymax = CI_DQs_RE[4]), fill = NA, color = four.colors[4]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.MSY$Model_name)) +
# scale_y_continuous(limits=ylims.in[9:10])+
coord_cartesian(ylim = ylims.in[9:10]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.grid.minor = element_blank()
) +
scale_color_manual(
values = four.colors[4],
name = "",
labels = yield.lab
) +
labs(x = sensi_xlab, y = "Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_REplot_MSY.png"))
# Log plots
Dev.quants.ggplot.MSY <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[4])
ggplot(Dev.quants.ggplot.MSY, aes(.data$Model_num_plot, logRE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[4], ymax = logCI_DQs_RE[4]), fill = NA, color = four.colors[4]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.MSY$Model_name)) +
# scale_y_continuous(limits=ylims.in[9:10])+
coord_cartesian(ylim = ylims.in[9:10]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.grid.minor = element_blank()
) +
scale_color_manual(
values = four.colors[4],
name = "",
labels = yield.lab
) +
labs(x = sensi_xlab, y = "Log Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_logREplot_MSY.png"))
}
if (plot.figs[6] == 1) {
# RE plots
Dev.quants.ggplot.FMSY <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[5])
ggplot(Dev.quants.ggplot.FMSY, aes(.data$Model_num_plot, RE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -CI_DQs_RE[5], ymax = CI_DQs_RE[5]), fill = NA, color = four.colors[5]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.FMSY$Model_name)) +
# scale_y_continuous(limits=ylims.in[11:12])+
coord_cartesian(ylim = ylims.in[11:12]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.grid.minor = element_blank()
) +
scale_color_manual(
values = four.colors[5],
name = "",
labels = F.lab
) +
labs(x = sensi_xlab, y = "Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_REplot_FMSY.png"))
# RE plots
Dev.quants.ggplot.FMSY <- subset(Dev.quants.ggplot, Metric == unique(Dev.quants.ggplot$Metric)[5])
ggplot(Dev.quants.ggplot.FMSY, aes(.data$Model_num_plot, logRE)) +
geom_point(aes(color = .data$Metric)) +
geom_rect(aes(xmin = 1, xmax = model.summaries$n + 1, ymin = -logCI_DQs_RE[5], ymax = logCI_DQs_RE[5]), fill = NA, color = four.colors[5]) +
geom_hline(yintercept = 0, lty = 1, color = "gray") +
scale_x_continuous(breaks = 2:(model.summaries$n), labels = unique(Dev.quants.ggplot.FMSY$Model_name)) +
# scale_y_continuous(limits=ylims.in[11:12])+
coord_cartesian(ylim = ylims.in[11:12]) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
panel.grid.minor = element_blank()
) +
scale_color_manual(
values = four.colors[5],
name = "",
labels = F.lab
) +
labs(x = sensi_xlab, y = "Log Relative change") +
annotate("text", x = anno.x, y = anno.y, label = anno.lab) +
geom_vline(xintercept = c(sensi.type.breaks), lty = lty.in)
ggsave(file.path(dir, "Sensi_logREplot_FMSY.png"))
}
}
runApp('Github/SS-DL-tool')
library(kableExtra)
out<-read.csv("C:/Users/Jason.Cope/Desktop/Data-moderate assessments/Squarespot models/NewM/Sensitivities/Data/Sensitivity Comparison Plots/Data_sensis_LO/Likes_parms_devquants_table.csv")
t = table_format(x = out[,-1],
caption = 'Sensitivities of data treatments relative to the base model.',
label = 'data_sensis',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Label","Type","Reference model","Catch lengths only","No catch lengths","No extra survey variance","No survey","Dirichlet","MI","No data weighting","Alt catch_3x","Alt catch_2008_shift"))
kableExtra::save_kable(t,
file = file.path("C:/Users/Jason.Cope/Documents/Github/squarespot_rockfish_2021/write_up/tex_tables/data_sensis.tex"))
library(sa4ss)
library(kableExtra)
out<-read.csv("C:/Users/Jason.Cope/Desktop/Data-moderate assessments/Squarespot models/NewM/Sensitivities/Data/Sensitivity Comparison Plots/Data_sensis_LO/Likes_parms_devquants_table.csv")
t = table_format(x = out[,-1],
caption = 'Sensitivities of data treatments relative to the base model.',
label = 'data_sensis',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Label","Type","Reference model","Catch lengths only","No catch lengths","No extra survey variance","No survey","Dirichlet","MI","No data weighting","Alt catch_3x","Alt catch_2008_shift"))
t = table_format(x = out[,-1],
caption = 'Sensitivities of data treatments relative to the base model.',
label = 'data_sensis',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Type","Reference model","Catch lengths only","No catch lengths","No extra survey variance","No survey","Dirichlet","MI","No data weighting","Alt catch_3x","Alt catch_2008_shift"))
t = table_format(x = out,
caption = 'Sensitivities of data treatments relative to the base model.',
label = 'data_sensis',
longtable = TRUE,
font_size = 9,
digits = 2,
landscape = TRUE,
col_names = c("Type","Reference model","Catch lengths only","No catch lengths","No extra survey variance","No survey","Dirichlet","MI","No data weighting","Alt catch_3x","Alt catch_2008_shift"))
kableExtra::save_kable(t,
file = file.path("C:/Users/Jason.Cope/Documents/Github/squarespot_rockfish_2021/write_up/tex_tables/data_sensis.tex"))
?add_figure
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
tinytex::tlmgr_install(pkgs="glossaries-english")
library(sa4ss)
tinytex::tlmgr_install(pkgs="glossaries-english")
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
remotes::install_github("r4ss/r4ss")
remotes::install_github("r4ss/r4ss")
library(r4ss)
x<-SS_output(C:/Users/Jason.Cope/Desktop/Data-moderate assessments/Squarespot models/NewM/Forecasts/Reference Model_Pstar45)
x<-SS_output("C:/Users/Jason.Cope/Desktop/Data-moderate assessments/Squarespot models/NewM/Forecasts/Reference Model_Pstar45")
SSexecutivesummary(Model.output)
SSexecutivesummary(x)
library(r4ss)
x<-SS_output("C:/Users/Jason.Cope/Desktop/Data-moderate assessments/Squarespot models/NewM/Forecasts/Reference Model_Pstar45")
SSexecutivesummary(x)
SSexecutivesummary(x)
shiny::runApp('Github/SS-DL-tool')
tinytex::tlmgr(c('install, '--file', shQuote('float.zip'))
libarry(FishLife)
libary(FishLife)
library(FishLife)
Plot_taxa( Search_species(Genus="Eutropiichthys",Species="vacha")$match_taxonomy )
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
install.packages("pdfpages")
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
input$use_forecastnew
!input$use_forecastnew
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
#detach("package:sa4ss", unload = TRUE)
#remotes::install_github("nwfsc-assess/sa4ss")
#devtools::load_all("C:/Users/Chantel.Wetzel/Documents/GitHub/r4ss")
library(sa4ss)
library(r4ss)
setwd("C:/Users/Jason.Cope/Documents/Github/Vermilion rockfish OR WA 2021/OR/write_up_test")
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
# Specify the directory for the document
setwd("C:/Users/Jason.Cope/Documents/Github/Vermilion rockfish OR WA 2021/OR/write_up")
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
base_name = "Reference model"
mod_loc = file.path(
"//nwcfile/FRAM/Assessments/CurrentAssessments/vermilion_2021/OR/models",
base_name)
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
sa4ss::read_model(
mod_loc = mod_loc,
create_plots = FALSE,
html = FALSE,
save_loc = file.path(getwd(), "tex_tables"),
verbose = TRUE)
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
setwd("C:/Users/Jason.Cope/Documents/Github/Vermilion rockfish OR WA 2021/WR/write_up")
# Specify the directory for the document
setwd("C:/Users/Jason.Cope/Documents/Github/Vermilion rockfish OR WA 2021/WR/write_up")
# Create the needed items to generate the "right" template that would be based on the inputs here:
sa4ss::draft(authors = c("Jason M. Cope","Tien-Shui Tsou","Kristen Hinton","Corey Niles"),
species = "Vermilion rockfish",
latin = "Sebastes miniatus",
coast = "US West - Oregon",
type = c("sa"),
create_dir = FALSE,
edit = FALSE)
# Specify the directory for the document
setwd("C:/Users/Jason.Cope/Documents/Github/Vermilion rockfish OR WA 2021/WA/write_up")
# Create the needed items to generate the "right" template that would be based on the inputs here:
sa4ss::draft(authors = c("Jason M. Cope","Tien-Shui Tsou","Kristen Hinton","Corey Niles"),
species = "Vermilion rockfish",
latin = "Sebastes miniatus",
coast = "US West - Oregon",
type = c("sa"),
create_dir = FALSE,
edit = FALSE)
# Specify the directory for the document
setwd("C:/Users/Jason.Cope/Documents/Github/Vermilion rockfish OR WA 2021/WA/write_up")
# Specify the directory for the document
setwd("C:/Users/Jason.Cope/Documents/Github/Vermilion rockfish OR WA 2021/WA/write-up")
# Create the needed items to generate the "right" template that would be based on the inputs here:
sa4ss::draft(authors = c("Jason M. Cope","Tien-Shui Tsou","Kristen Hinton","Corey Niles"),
species = "Vermilion rockfish",
latin = "Sebastes miniatus",
coast = "US West - Oregon",
type = c("sa"),
create_dir = FALSE,
edit = FALSE)
if(file.exists("_main.Rmd")){
file.remove("_main.Rmd")
}
# Render the pdf
bookdown::render_book("00a.Rmd", clean=FALSE, output_dir = getwd())
shiny::runApp('~/Github/Natural-Mortality-Tool')
